pipeline {
    agent any

    environment {
        COMPILED_BRANCH=""
        PARENT_BUILD=""
        BUILD_VERSION_JENKINS=""
        BUILTE_CONFIGURATION=""
        BUILD_COMMENTS=""
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder logRotator(artifactDaysToKeepStr: '',
             artifactNumToKeepStr: '', 
             daysToKeepStr: '', 
             numToKeepStr: '50')
    }

    parameters {
        choice(name: 'build_type',
            choices: 'All\nDebug\nRelease',
            description: 'Select build configuration:')

        booleanParam(name: 'target_iOS',        defaultValue: true, description: '')
        booleanParam(name: 'target_Android',    defaultValue: true, description: '')
        booleanParam(name: 'target_OSX',        defaultValue: true, description: '')
        booleanParam(name: 'target_Windows',    defaultValue: true, description: '')

        text(name: 'build_comments', defaultValue: '', description: '')

        gitParameter branch: '.*',
            branchFilter: '.*',
            defaultValue: 'master', 
            description: '', 
            name: 'BRANCH', 
            quickFilterEnabled: true, 
            selectedValue: 'DEFAULT', 
            sortMode: 'ASCENDING_SMART', 
            tagFilter: '*', 
            type: 'PT_BRANCH'
    }

    stages {
        stage('Config check') {
            steps {
                echo 'Build parameters:'
                echo "build configuration: ${params.build_type}"
                echo "Debug logs: ${params.is_log_messages}"
                echo "Symbols: ${params.is_symbols}"
                echo "target_iOS: ${params.target_iOS}"
                echo "target_Android: ${params.target_Android}"
                echo "target_OSX: ${params.target_OSX}"
                echo "target_Windows: ${params.target_Windows}"
                echo "BRANCH2: ${params.BRANCH}"
                
                script {
                    BBB=${params.build_type}"
                    if ("${params.build_type}" == "__All") {
                    	IS_DEBUG_BUILD=true
                    	RELEASE_BUILD=true
                        currentBuild.result = 'ABORTED'
						echo "---xxxxxxxxxxxxx--------"
                        error('DRY RUN COMPLETED. JOB PARAMETERIZED.')
                    }
                }
            }
        }
        
        stage('run build 1 RELEASE') {
            when {
                expression { params.build_type == 'All' || params.build_type == 'Release' || params.build_type == 'Debug' }
            }
            steps {
                script {
                echo 'BUILD1 - release'
                b = build(job: 'HelloWorld_Pipeline', propagate: false,
                    parameters: [
                        gitParameter(name: 'BRANCH', value: "${params.BRANCH}"),
                        string(name: 'build_type', value: "${params.build_type}"),
                        string(name: 'is_run_build', value: "${params.target_Android}"),
                        string(name: 'parent_build_number', value: "${params.BUILD_NUMBER}")
                    ]).result
                if(b == 'NOT_BUILT') {
                    echo "First job no run "
                    currentBuild.result = 'SUCCESS' // of FAILURE
                }
                else
                {
                    echo "First job NOT failed"
                    currentBuild.result = b
                }
                }
            }
            post {
                success {
                    sh '''
                        #!/bin/bash
                        echo "XXXX PASS" >> tmp_build_comments1.txt

                    '''
                }
                unstable {
                    script {
                        BUILD_COMMENTS="UNSTABLE"
                    }
                }
                failure {
                    script {
                        BUILD_COMMENTS="FAILED"
                    }
                }
                changed {
                    script {
                        BUILD_COMMENTS="CHANGED"
                    }
                }
            }
        }

        stage('run build 1 DEBUG') {
            when {
                expression { params.build_type == 'All__'  }
            }
            steps {
                echo 'BUILD2 - debug'
                build job: 'HelloWorld_Pipeline', 
                    parameters: [
                        gitParameter(name: 'BRANCH', value: "${params.BRANCH}"),
                        string(name: 'build_type', value: "${params.build_type}")
                    ]        
                    catchError(buildResult: 'ABORTED', stageResult: 'FAILURE')
                    {
                        echo "GUY@@@@@@@@@@@ - build exception!!!!!!"
                    }
            }
        }
    }

    post {
        success {
            script {
                env.BUILD_C = {params.build_comments}
                    env.LS = params.build_comments + "  \n\n" + "HELLO " + params.build_type
                    echo "LS = ${env.LS}"                    
            }
            sh '''
                #!/bin/bash
                echo 'success - guy'
                echo "HELLO - $LS"
                tag_name="v2v"$BUILD_NUMBER"_guy"
                echo "BRANCH--------s-:$BRANCH"
                git clean -xfd
                git checkout -f "$BRANCH"
                git tag -a $tag_name -m "$LS"
                git push origin --tags
            '''

        }
        unsuccessful {
           sh '''
                #!/bin/bash
                echo 'un-success - guy'
            '''
        }
    }
}

